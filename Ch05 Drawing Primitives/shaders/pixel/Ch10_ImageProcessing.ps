cbuffer constants : register(b0)
{
    int2 kernelDims;  // Kernel dimensions
    int2 kernelOffset; // An offset to add to the sampling uv, in whole texels
};

Texture2D colorTexture : register(t0);
Texture2D kernelTexture : register(t1);

SamplerState colorSampler : register(s0);

struct PSIn
{
    float4 position : SV_Position;
    float2 uv : TEXCOORD;
};
    
float4 main(PSIn psIn) : SV_Target
{
    float2 imageSize;
    colorTexture.GetDimensions(imageSize.x, imageSize.y);
    
    float2 texelOffsets = 1.0f / imageSize;
    float4 colorAcc = { 0, 0, 0, 0 };
    float totalWeight = 0;
    
    for (int ky = 0; ky < kernelDims.y; ++ky)
    {
        for (int kx = 0; kx < kernelDims.x; ++kx)
        {
            float2 kCoords = { kx, ky };
            float weight = kernelTexture.Load(int3(0, kx, ky));
            totalWeight += weight;
            
            float2 texSamplePos = psIn.uv + ((kCoords + kernelOffset) * texelOffsets);
            float4 color = colorTexture.Sample(colorSampler, texSamplePos);
            colorAcc += color * weight;
        }
    }
    
    return float4(colorAcc.rgb / totalWeight, 1.f);
}
